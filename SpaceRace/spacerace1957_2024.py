# -*- coding: utf-8 -*-
"""SpaceRace1957-2024.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1XayYjCYgeDx8IlwWTvPi5el0pDSmR7F0

# **Space Race**
"""

from IPython.display import Image
Image('rocket-launch-67649_640.png')

# %pip install --upgrade plotly

pip install iso3166

pip install pycountry

"""# **Import Statements**"""

import pandas as pd
import numpy as np
import plotly.express as px
import seaborn as sns
import matplotlib.pyplot as plt

from iso3166 import countries_by_name
import pycountry
import plotly.graph_objects as go

pd.options.display.float_format = '{:,.2f}'.format

df_data = pd.read_csv('Space_Corrected.csv')



"""## **Data Information And Cleaning**"""

df_data.shape

df_data

list[df_data.columns]

df_data.duplicated().sum()

print(f'Any duplicates? {df_data.duplicated().values.any()}')

nan_df = df_data.isna()
print(nan_df)

print(df_data.columns.tolist())

df_data.columns = df_data.columns.str.strip()

df_data

df_data.dtypes

print(f'Any NaN values among the data? {df_data.isna().values.any()}')

df_data.isna().sum()

df_data

df_data['Rocket'] = df_data['Rocket'].replace(',', '', regex=True)

df_data['Rocket'] = df_data['Rocket'].astype(float).fillna(0.0)

df_data

df_data.info()

df_data['Rocket'].info()

df_data['Location']

"""# **Location column split to derive Country column**"""

df_data['Location'] = df_data['Location'].astype('string')
df_data.dtypes

print(df_data['Location'][0].split(",")[2])

#df_data['Country'] = df_data['Location'].str.split(',').str[-1]
#df_data['Country']

df_data['Country']=df_data['Location'].apply(lambda row: row.split(',')[-1])
df_data['Country']

df_data

"""# **Datum column split to derive year**"""

df_data['Time'] = pd.to_datetime(df_data['Datum'], format='mixed')
df_data['Year'] = df_data['Time'].apply(lambda datetime: datetime.year)
df_data['Year']

df_data['Month'] = df_data['Time'].apply(lambda datetime: datetime.strftime('%B'))
df_data['Month']

df_data['Day'] = df_data['Time'].apply(lambda datetime: datetime.strftime('%A'))
df_data['Day']

df_data

df_data.drop(columns=['Time'])

"""# **Plotly Donut Chart For Active And Retired Rockets.**"""

status = df_data['Status Rocket'].value_counts()
fig = px.pie(labels=status.index,
                 values=status.values,
                 title="Percentage of Active vs. Retired Rockets",
                 names=status.index,
                 hole=0.4,)

fig.update_traces(textposition='inside', textfont_size=15, textinfo='percent')

fig.show()

"""## **Number Of Launches Per Organisation**"""

number_launches = df_data['Company Name'].value_counts()
v_bar = px.bar(
            x = number_launches.index,
            y = number_launches.values,
            color = number_launches.values,
            color_continuous_scale='Aggrnyl',
            title='Number of Launches per Company')

v_bar.update_layout(xaxis_title='Space Companies',
                        coloraxis_showscale=False,
                        yaxis_title='Number of Launches')
v_bar.show()

"""# **Pie Chart For Number Of Launches Per Company**"""

country_yearly_launches = df_data.groupby('Country')['Year'].value_counts().rename_axis(["Country", "Year"]).reset_index(name="counts")
country_yearly_launches

"""# **Percentage of launches per country and per year**"""

fig = px.pie(country_yearly_launches,values="counts", names="Country")
fig.update_traces(textposition='inside', textinfo='percent+label',textfont_size=20)
fig.show()

"""# **Number Of Launches Per Country**

# **Bar Chart**
"""

country_launches = df_data['Country'].value_counts()
v_bar = px.bar(
            x = country_launches.index,
            y = country_launches.values,
            color = country_launches.values,
            color_continuous_scale='Aggrnyl',
            title='Number of Launches per Country')

v_bar.update_layout(xaxis_title='Countries',
                        coloraxis_showscale=False,
                        yaxis_title='Number of Launches')
v_bar.show()

print(number_launches.index)

"""# **Countplot**"""

plt.figure(figsize=(8,18))
sns.countplot(y='Country', data=df_data, order=df_data['Country'].value_counts().index, hue='Country')
plt.xlim(0,1500)

space_mission_cost = df_data.groupby(['Company Name'])['Rocket'].sum()
print(space_mission_cost)

avg_mission_cost = df_data.groupby(['Company Name'])['Rocket'].mean()
print(avg_mission_cost)

"""# **Price per Company on space launches**"""

df = df_data.groupby(["Company Name"])["Rocket"].sum().reset_index()
df.plot(kind="bar", x="Company Name", y="Rocket", figsize=(10,6),legend=False)

"""# **Price per country for space launches**"""

df = df_data.groupby(["Country"])["Rocket"].sum().reset_index()
df.plot(kind="bar", x="Country", y="Rocket", figsize=(10,6),legend=False)

"""# **Total Price per Year spent on space launches by various countries between 1957 and 2020**"""

df = df_data.groupby(["Year"])["Rocket"].sum().reset_index()
df.plot(kind="bar", x="Year", y="Rocket", figsize=(10,6),legend=False)

"""# **Price Of Launch Per Organisation split by Active and Inactive**"""

cat_active_inactive = df_data.groupby(['Company Name', 'Status Rocket'],
                                   as_index=False).agg({'Rocket': pd.Series.count})
cat_active_inactive.sort_values('Rocket', ascending=False, inplace=True)
v_bar_split = px.bar(x = cat_active_inactive['Company Name'],
                         y = cat_active_inactive.Rocket,
                         color = cat_active_inactive['Status Rocket'],
                         title='Price Of Launch Per Organisation split by Active and Inactive')

v_bar_split.update_layout(xaxis_title='Organisations',
                              yaxis_title='Rocket Price')
v_bar_split.show()

"""# **Status "Active" and Status "Inactive" Rockets**

# **Countplot**
"""

sns.countplot(x="Status Rocket", data=df_data, hue='Status Rocket', palette='mako')
plt.show()

"""# **Bar Chart Showing Mission Status Per Company**"""

v_bar = px.bar(
            x = df_data['Company Name'],
            y = df_data['Status Mission'],

            color_continuous_scale='Aggrnyl',
            title='Mission-Status per Company')

v_bar.update_layout(xaxis_title='Space Companies',
                        coloraxis_showscale=False,
                        yaxis_title='Mission-Status')
v_bar.show()

# draw a histogram with blue bars and a grid
df_data['Company Name'].hist(color='blue', grid=False, figsize=(8,6))

# add labels and title
plt.xlabel('Company Name')
plt.ylabel('Status Mission')
plt.title('Mission Status Distribution')

"""# **Histogram For Organisations and Number Of Launches showing success, failure, prelaunch failure and partial failure**"""

fig = px.histogram(df_data, x="Company Name", color="Status Mission", labels={'x':'Company Name', 'y':'Status Mission'})
fig.show()

"""# **Histogram For Status Of Mission**"""

fig = px.histogram(df_data, color="Status Mission", x=df_data['Status Mission'])
fig.show()

"""# **ISO Codes For Countries**"""

def iso(country):
     try:
         iso = pycountry.countries.search_fuzzy(country)
     except Exception:
         return np.nan
     else:
         return iso[0].alpha_3

df_data['ISO'] = df_data['Country'].apply(lambda country: iso(country))
df_data['ISO']

#iso_map = {country: do_fuzzy_search(country) for country in df["Country"].unique()}
#df["country_code"] = df["Country"].map(iso_map)

df_iso = df_data['ISO'].value_counts()

"""# **Chloropleth Map Showing Coutries In The Space Race And Number Of Launches**"""

world_map = px.choropleth(df_iso,
                          locations=df_iso.index,
                          color=df_iso.values,
                          hover_name=df_iso.index,
                          color_continuous_scale=px.colors.sequential.matter)

world_map.update_layout(coloraxis_showscale=True,)

world_map.show()

"""# **Number Of Launches Per Year**"""

yearly_launches = df_data['Year'].value_counts()
v_bar = px.bar(
            x = yearly_launches.index,
            y = yearly_launches.values,
            color = yearly_launches.values,
            color_continuous_scale=px.colors.diverging.BrBG,
            title='Number of Launches per Year')

v_bar.update_layout(xaxis_title='Year',
                        coloraxis_showscale=False,
                        yaxis_title='Number of Launches')
v_bar.show()

"""# **Number Of Launches Per Month**"""

df_data['Month'] = df_data['Time'].apply(lambda datetime: datetime.strftime('%B'))
df_data['Month']

monthly_launches = df_data['Month'].value_counts()
v_bar = px.bar(
            x = monthly_launches.index,
            y = monthly_launches.values,
            color = monthly_launches.values,
            color_continuous_scale=["red","green","blue"],
            title='Number of Launches per Month')

v_bar.update_layout(xaxis_title='Month',
                        coloraxis_showscale=False,
                        yaxis_title='Number of Launches')
v_bar.show()

"""# **Number Of Launches Per Day**"""

df_data['Day'] = df_data['Time'].apply(lambda datetime: datetime.strftime('%A'))
df_data['Day']

weekday_launches = df_data['Day'].value_counts()
v_bar = px.bar(
            x = weekday_launches.index,
            y = weekday_launches.values,
            color = weekday_launches.index,
            color_continuous_scale='px.colors.sequential.Viridis',
            title='Number of Launches per Weekday')

v_bar.update_layout(xaxis_title='Day',
                        coloraxis_showscale=False,
                        yaxis_title='Number of Launches')
v_bar.show()

"""# **Top 10 organisations By Price Spent On Space Missions**"""

top_organisations = df_data.groupby(['Company Name'],
                                      as_index=False).agg({'Rocket': pd.Series.count})

top_organisations.sort_values(by='Rocket', inplace=True)
top10_organisations = top_organisations[-10:]
top10_organisations

h_bar = px.bar(x=top10_organisations.Rocket,
                   y=top10_organisations['Company Name'],
                   orientation='h',
                   color=top10_organisations.Rocket,
                   color_continuous_scale='Viridis',
                   title='Top 10 Organisations by Price Spent On Space Missions')

h_bar.update_layout(xaxis_title='Cost',
                        yaxis_title='Company',
                        coloraxis_showscale=False)
h_bar.show()

"""# **Sunburst Chart Showing Countries In The Space Race**"""

sunburst_data = df_data.groupby(by=['Country','Company Name','Status Mission'], as_index=False).agg({'Rocket': pd.Series.count})

sunburst_data = sunburst_data.sort_values('Rocket', ascending=False)

burst = px.sunburst(sunburst_data,
                        path=['Country', 'Company Name', 'Status Mission'],
                        values='Rocket',
                        title='Which countries and organisations are in the space race?',
                       )

burst.update_layout(xaxis_title='Cost of launches',
                        yaxis_title='Country',
                        coloraxis_showscale=False)

burst.show()

spacerace_countries = df_data.groupby(['ISO']).apply(lambda x: x["ISO"]=="USA")
spacerace_countries



usa_launches = df_data.groupby("Country").filter(lambda x: x.Country.str.contains("USA").any())
usa_launches

russia_launches = df_data.groupby("Country").filter(lambda x: x.Country.str.contains("Russia").any())
russia_launches

superpowers=[usa_launches, russia_launches]
superpower_launches = pd.concat(superpowers)
superpower_launches

superpowers = superpower_launches['Country'].rename_axis(['Country']).reset_index(name="counts")
superpowers

sns.countplot(x="Country", data=superpowers, hue='Country', palette='mako')
plt.show()

fig = px.histogram(
    superpowers,
    x=["Country"],
    facet_col="variable",
    color="counts",
    barmode="group",
    histnorm="percent",
    text_auto=".2r",
).update_xaxes(matches=None, showticklabels=True).update_yaxes(matches=None, showticklabels=True)

fig.show()

fig = px.pie(superpower_launches, values="Year", names="Country")
fig.update_traces(textposition='inside', textinfo='percent+label',textfont_size=10)
fig.show()

status = superpower_launches['Status Mission'].value_counts()
fig = px.pie(labels=status.index,
                 values=status.values,
                 title="",
                 names=status.index,
                 hole=0.4,)

fig.update_traces(textposition='inside', textfont_size=15, textinfo='percent')

fig.show()

status = superpower_launches['Year'].value_counts()
fig = px.pie(labels=status.index,
                 values=status.values,
                 title="Percentage of Yearly Launches By Russia and USA",
                 names=status.index,
                 hole=0.4,)

fig.update_traces(textposition='inside', textfont_size=15, textinfo='percent')

fig.show()

df = superpower_launches.groupby(["Year"])["Rocket"].sum().reset_index()
df.plot(kind="bar", x="Year", y="Rocket", figsize=(10,6),legend=False)